{"ast":null,"code":"var _jsxFileName = \"/Users/hamzehhussein/Desktop/app/MovieMatch/movie-match-frontend/src/components/MovieSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { fetchRecommendations, fetchMovieTitles } from '../api';\n\n// Function to get suggestions based on input\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getSuggestions = (value, titles) => {\n  const inputValue = value.toLowerCase();\n  return titles.filter(title => title.toLowerCase().includes(inputValue));\n};\n\n// Function to render each suggestion\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: suggestion\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 5\n}, this);\nconst MovieSearch = () => {\n  _s();\n  const [value, setValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [titles, setTitles] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [error, setError] = useState('');\n\n  // Fetch movie titles from backend\n  useEffect(() => {\n    const loadTitles = async () => {\n      try {\n        const titles = await fetchMovieTitles();\n        setTitles(titles);\n      } catch (error) {\n        setError('Error fetching movie titles.');\n      }\n    };\n    loadTitles();\n  }, []);\n\n  // Update suggestions based on input value\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value, titles));\n  };\n\n  // Clear suggestions when necessary\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  // Handle input field change\n  const onChange = (event, {\n    newValue\n  }) => {\n    setValue(newValue);\n  };\n\n  // Perform search based on the current input value\n  const handleSearch = async () => {\n    try {\n      const data = await fetchRecommendations(value);\n      setRecommendations(data);\n      setError('');\n    } catch (error) {\n      setError('Error fetching recommendations.');\n    }\n  };\n\n  // Input props for Autosuggest\n  const inputProps = {\n    placeholder: 'Type a movie title',\n    value,\n    onChange\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie Recommender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: onSuggestionsClearRequested,\n      getSuggestionValue: suggestion => suggestion,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: recommendations.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://image.tmdb.org/t/p/w500/${movie.poster_path}`,\n          alt: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(MovieSearch, \"p6h6Fmpdy6K5e4YiEOOvsY65iCU=\");\n_c = MovieSearch;\nexport default MovieSearch;\nvar _c;\n$RefreshReg$(_c, \"MovieSearch\");","map":{"version":3,"names":["React","useState","useEffect","Autosuggest","fetchRecommendations","fetchMovieTitles","jsxDEV","_jsxDEV","getSuggestions","value","titles","inputValue","toLowerCase","filter","title","includes","renderSuggestion","suggestion","children","fileName","_jsxFileName","lineNumber","columnNumber","MovieSearch","_s","setValue","suggestions","setSuggestions","setTitles","recommendations","setRecommendations","error","setError","loadTitles","onSuggestionsFetchRequested","onSuggestionsClearRequested","onChange","event","newValue","handleSearch","data","inputProps","placeholder","getSuggestionValue","onClick","map","movie","src","poster_path","alt","id","_c","$RefreshReg$"],"sources":["/Users/hamzehhussein/Desktop/app/MovieMatch/movie-match-frontend/src/components/MovieSearch.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { fetchRecommendations, fetchMovieTitles } from '../api';\n\n// Function to get suggestions based on input\nconst getSuggestions = (value, titles) => {\n    const inputValue = value.toLowerCase();\n    return titles.filter(title => title.toLowerCase().includes(inputValue));\n};\n\n// Function to render each suggestion\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nconst MovieSearch = () => {\n    const [value, setValue] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n    const [titles, setTitles] = useState([]);\n    const [recommendations, setRecommendations] = useState([]);\n    const [error, setError] = useState('');\n\n    // Fetch movie titles from backend\n    useEffect(() => {\n        const loadTitles = async () => {\n            try {\n                const titles = await fetchMovieTitles();\n                setTitles(titles);\n            } catch (error) {\n                setError('Error fetching movie titles.');\n            }\n        };\n\n        loadTitles();\n    }, []);\n\n    // Update suggestions based on input value\n    const onSuggestionsFetchRequested = ({ value }) => {\n        setSuggestions(getSuggestions(value, titles));\n    };\n\n    // Clear suggestions when necessary\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([]);\n    };\n\n    // Handle input field change\n    const onChange = (event, { newValue }) => {\n        setValue(newValue);\n    };\n\n    // Perform search based on the current input value\n    const handleSearch = async () => {\n        try {\n            const data = await fetchRecommendations(value);\n            setRecommendations(data);\n            setError('');\n        } catch (error) {\n            setError('Error fetching recommendations.');\n        }\n    };\n\n    // Input props for Autosuggest\n    const inputProps = {\n        placeholder: 'Type a movie title',\n        value,\n        onChange\n    };\n\n    return (\n        <div>\n            <h1>Movie Recommender</h1>\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\n                getSuggestionValue={suggestion => suggestion}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n            />\n            <button onClick={handleSearch}>Search</button>\n            {error && <p>{error}</p>}\n            <div>\n                {recommendations.map((movie) => (\n                    <div key={movie.id}>\n                        <h2>{movie.title}</h2>\n                        <img\n                            src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                            alt={movie.title}\n                        />\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default MovieSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}